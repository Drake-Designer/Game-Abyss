"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/
"""

from pathlib import Path
import os
import warnings

import dj_database_url  # For Postgres when DATABASE_URL is set

try:  # Optional dependency for deployments
    import cloudinary
except ImportError:  # Fallback if Cloudinary package is missing
    cloudinary = None

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent


# Try to load env.py if it exists (local only, not on Heroku)
try:
    from env import *  # noqa
except ImportError:
    pass


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    raise RuntimeError(
        "SECRET_KEY is not set. Set it in env.py (local) or in Heroku Config Vars."
    )

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG is True by default locally, False when DEBUG=False in Heroku
DEBUG = os.environ.get("DEBUG", "True") == "True"

# Allowed hosts
_alh = os.environ.get("ALLOWED_HOSTS", "")
ALLOWED_HOSTS = _alh.split(",") if _alh else []

# CSRF trusted origins (needed for Heroku forms)
CSRF_TRUSTED_ORIGINS = (
    os.environ.get("CSRF_TRUSTED_ORIGINS", "").split(",")
    if os.environ.get("CSRF_TRUSTED_ORIGINS")
    else []
)


# Application definition
INSTALLED_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",

    # Third-party apps
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "widget_tweaks",

    # Local apps
    "pages",
    "accounts",
    "blog",
]

# Enable Cloudinary storage if available
if cloudinary is not None:
    INSTALLED_APPS.extend(["cloudinary", "cloudinary_storage"])
    DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"


# Django sites framework
SITE_ID = int(os.environ.get("SITE_ID", "1"))


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    # Temporarily disabled for Am I Responsive screenshot
    # "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# Default is SQLite (local dev)
DATABASES = {
    "default": {"ENGINE": "django.db.backends.sqlite3", "NAME": BASE_DIR / "db.sqlite3"}
}

# If DATABASE_URL is set, override with Postgres
db_url = os.environ.get("DATABASE_URL")
if db_url:
    DATABASES["default"] = dj_database_url.parse(
        db_url, conn_max_age=600, ssl_require=True
    )


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
LANGUAGE_CODE = "en-gb"

TIME_ZONE = "Europe/Dublin"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"

# Local static folders used during development
STATICFILES_DIRS = [BASE_DIR / "static"]

# Static root for collectstatic (Heroku)
STATIC_ROOT = BASE_DIR / "staticfiles"

# Whitenoise storage for serving static files in production
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files (user uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django-allauth configuration
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Email configuration
# - DEBUG: print emails to console
# - PRODUCTION (Heroku): use SMTP settings provided via SendGrid
DEFAULT_FROM_EMAIL = os.environ.get(
    "DEFAULT_FROM_EMAIL", "Game Abyss <team.gameabyss@gmail.com>"
)
SENDGRID_API_KEY = os.environ.get("SENDGRID_API_KEY", "")
PRIMARY_SUPERADMIN_EMAIL = os.environ.get(
    "PRIMARY_SUPERADMIN_EMAIL", "team.gameabyss@gmail.com"
)

if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = os.environ.get(
        "EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend"
    )
    EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.sendgrid.net")
    EMAIL_PORT = int(os.environ.get("EMAIL_PORT", "587"))
    EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "True") == "True"
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "apikey")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")

SERVER_EMAIL = DEFAULT_FROM_EMAIL


# Comment moderation defaults
_banned_words_raw = os.environ.get(
    "BLOG_COMMENT_BANNED_WORDS", "spam, scam, offensive"
)
BLOG_COMMENT_BANNED_WORDS = [
    word.strip().lower() for word in _banned_words_raw.split(",") if word.strip()
]
BLOG_COMMENT_MAX_LINKS = int(os.environ.get("BLOG_COMMENT_MAX_LINKS", "2"))


# Ensure allauth builds absolute URLs with HTTPS in production
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https" if not DEBUG else "http"

# Allauth settings (Email optional, username required, password confirmed twice)
ACCOUNT_LOGIN_METHODS = {"email", "username"}
ACCOUNT_SIGNUP_FIELDS = ["email", "username*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
LOGIN_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/"

# Prefix for allauth emails
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[Game Abyss] "

# X-Frame-Options: allow site embedding for screenshot tools like Am I Responsive
X_FRAME_OPTIONS = "SAMEORIGIN"


# Cloudinary configuration
if cloudinary is not None:
    # Cloudinary configuration for media storage
    cloudinary_url = os.environ.get("CLOUDINARY_URL")
    cloud_name = os.environ.get("CLOUDINARY_CLOUD_NAME")
    api_key = os.environ.get("CLOUDINARY_API_KEY")
    api_secret = os.environ.get("CLOUDINARY_API_SECRET")

    if cloudinary_url:
        cloudinary.config(cloudinary_url=cloudinary_url, secure=True)
    elif cloud_name and api_key and api_secret:
        cloudinary.config(
            cloud_name=cloud_name,
            api_key=api_key,
            api_secret=api_secret,
            secure=True,
        )
    else:
        warnings.warn(
            "Cloudinary credentials are not configured. "
            "Set CLOUDINARY_URL or CLOUDINARY_CLOUD_NAME/API_KEY/API_SECRET "
            "to enable image uploads.",
            RuntimeWarning,
        )
else:
    warnings.warn(
        "Cloudinary package is not installed. Falling back to default file storage for images.",
        RuntimeWarning,
    )
